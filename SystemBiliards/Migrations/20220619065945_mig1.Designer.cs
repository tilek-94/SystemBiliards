// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SystemBiliards.Infrastucture;

namespace SystemBiliards.Migrations
{
    [DbContext(typeof(ApplicationContext))]
    [Migration("20220619065945_mig1")]
    partial class mig1
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 64)
                .HasAnnotation("ProductVersion", "5.0.17");

            modelBuilder.Entity("SystemBiliards.Models.Accounts", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("AccountName")
                        .HasColumnType("longtext");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("longtext");

                    b.Property<string>("Role")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Accounts");
                });

            modelBuilder.Entity("SystemBiliards.Models.CountTimeTable", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("Count")
                        .HasColumnType("int");

                    b.Property<double>("Price")
                        .HasColumnType("double");

                    b.HasKey("Id");

                    b.ToTable("CountTimeTable");
                });

            modelBuilder.Entity("SystemBiliards.Models.CurrTimeTable", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<double>("ByAmount")
                        .HasColumnType("double");

                    b.Property<bool>("ByAmountStatuse")
                        .HasColumnType("tinyint(1)");

                    b.Property<double>("ByTime")
                        .HasColumnType("double");

                    b.Property<bool>("ByTimeStatuse")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("NoLimitedStatuse")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime>("NowTime")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("UntilTheTime")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("UntilTheTimeStatuse")
                        .HasColumnType("tinyint(1)");

                    b.HasKey("Id");

                    b.ToTable("CurrTimeTables");
                });

            modelBuilder.Entity("SystemBiliards.Models.Historys", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("AccountId")
                        .HasColumnType("int");

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Name")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("StatusId")
                        .HasColumnType("int");

                    b.Property<double>("Summa")
                        .HasColumnType("double");

                    b.Property<int>("TableId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("StatusId");

                    b.HasIndex("TableId");

                    b.ToTable("Histories");
                });

            modelBuilder.Entity("SystemBiliards.Models.Statuses", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<double>("Price")
                        .HasColumnType("double");

                    b.Property<string>("StatusName")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Statuses");
                });

            modelBuilder.Entity("SystemBiliards.Models.Tables", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("CountTimeId")
                        .HasColumnType("int");

                    b.Property<int>("StatusId")
                        .HasColumnType("int");

                    b.Property<string>("TableName")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("CountTimeId");

                    b.HasIndex("StatusId");

                    b.ToTable("Tables");
                });

            modelBuilder.Entity("SystemBiliards.Models.Historys", b =>
                {
                    b.HasOne("SystemBiliards.Models.Accounts", "Account")
                        .WithMany()
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SystemBiliards.Models.Statuses", "Status")
                        .WithMany()
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SystemBiliards.Models.Tables", "Table")
                        .WithMany()
                        .HasForeignKey("TableId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");

                    b.Navigation("Status");

                    b.Navigation("Table");
                });

            modelBuilder.Entity("SystemBiliards.Models.Tables", b =>
                {
                    b.HasOne("SystemBiliards.Models.CountTimeTable", "CountTime")
                        .WithMany()
                        .HasForeignKey("CountTimeId");

                    b.HasOne("SystemBiliards.Models.Statuses", "Status")
                        .WithMany()
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CountTime");

                    b.Navigation("Status");
                });
#pragma warning restore 612, 618
        }
    }
}
